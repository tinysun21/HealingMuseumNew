<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!--  
##########################################################################
# 처리 결과를 결정하는 Revolver 설정   
##########################################################################
 -->
 	
 	<!-- controller 의 리턴 결과 문자열을 Bean 이름으로 해석하여 뷰를 선택하는 resolver 우선순위:4 	-->
	 <bean id="beanNameResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	 	<property name="order" value="2" />
	 </bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean id="internalResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	 	<property name="order" value="4" />
	 	<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="contentType" value="text/html; charset=UTF-8" />
	</bean>
	
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	 	<property name="order" value="3" />
	 	<!-- 
	 	<property name="mediaTypes">
	 		<map>
	 			<entry key="json" value="application/json" />
	 		</map>
	 	</property>
	 	 -->
	 	<property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManager">
                <constructor-arg>
                    <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
                        <constructor-arg>
                            <map>
                                <entry key="json" value="application/json"/>
                            </map>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
	 	<property name="defaultViews">
	 		<list>
	 			<bean class="com.skcj.HealingMuseum.common.JSONView" >
	 				<property name="contentType" value="application/json; charset=UTF-8" />
	 			</bean>
	 		</list>
	 	</property>
	 	<property name="ignoreAcceptHeader" value="true" />
 	</bean>	
		
		
	<!-- 응답메세지를 위한 메세지소스 Bean생성 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/spring/messages/messages</value>
			</list>
		</property>
		<property name="fallbackToSystemLocale" value="false"/>
		<property name="cacheSeconds" value="10" />
		<property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	<bean id="messageCache" class="com.skcj.HealingMuseum.util.MessageCache">
		<property name="messageSource" ref="messageSource"></property>
	</bean>
	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="ko" />
	</bean>
	
	<!-- java 에서 사용하기 위해 만든 클래스 -->
	<bean id="prop" class="com.skcj.HealingMuseum.util.PropUtil" />
	
	<!--  
	##########################################################################
	# DataSource를 사용한 DB connection pool 설정 및 스프링 트랜잭션 관리 설정  
	##########################################################################
	 -->
	<!-- 이하의 데이터베이스 관련 빈에서 사용할 jdbc.properties를 가져오는 빈 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>
	
	<util:properties id="config" location="classpath:config.properties"/>
	
	<!-- Apache DBCP DataSource를 생성한다. 데이터베이스 관련 설정은 jdbc.properties를 따른다. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	</bean>
	
	<!-- 트랜잭션 매니저 빈을 생성한다. -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--  
	##########################################################################
	# DataSource를 사용한 스프링 iBatis 3.1(MyBatis) 연동 설정  
	##########################################################################
	 -->
	<!-- mybatis SqlSessionFactory 빈을 생성한다. mybatis에서 사용할 매퍼 XML의 경로를 설정한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/spring/mybatis-config.xml" />
	</bean>

	<!-- SqlSession 빈을 생성한다. -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
</beans>
